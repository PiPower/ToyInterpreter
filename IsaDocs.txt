This file contains all the opcodes and descriptions
for stack based VM that supports functional subset of lox
----------------------------------------
Name; Description, byte structure
---------------------------------------
EXIT; exit program; op_code(2 byte)
PUSH IMMIDITE; Push immidiate of type specified by 1byte char onto the stack; op_code(2 byte)|type(1 byte) |value*
	*depending on type value is: 
	NIL(0) : None
	NUMBER(1) : double(8 byte) 
	BOOL(2) : bool(1 byte bool)
	STRING(3) : index(4 byte int)
POP; pop value from stack; op_code(2 byte)
PUSH; push value onto stack; op_code(2 byte)
ADD,
DIVIDE,
SUBTRACT,
MULTIPLY; calculate mentioned op. First pop both operands from stack then performorms op and pushes result onto stack; op_code(2 byte)
PRINT; pop 1st lox object from stack and print it; op_code(2 byte)
EQUAL; pop 1st lox object from stack and assign it to specified global or local; op_code(2 byte)|string_index(4 byte int)
DEFINE GLOBAL VARIABLE; creates NIL variable for name in global table, name is stored in string table; op_code(2 byte)|string_index(4 byte int)
SET GLOBAL VARIABLE; assigns new value to global object; op_code(2 byte)|string_index(4 byte int)
GET GLOBAL VARIABLE; pushes given global onto stack; op_code(2 byte)|string_index(4 byte int)
DEFINE LOCAL VARIABLE; pushes NIL variable onto top of the stack; op_code(2 byte)|unused(4 byte)
SET LOCAL VARIABLE; assigns new value to object at pos = stack_base + stack_offset; op_code(2 byte)|stack_offset(4 byte int)
GET LOCAL VARIABLE; pushes object from stack at pos = stack_base + stack_offset onto top of the stack; op_code(2 byte)|stack_offset(4 byte int)
START FRAME; changes stack base onto top of the stack; op_code(2 byte)
END FRAME; restores stack base onto previous top value; op_code(2 byte)
NOT; pop value from stack and negate it; op_code(2 byte)
